name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        # Install flake8
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run unit tests
      run: |
        make test-unit

    - name: Run integration tests
      run: |
        make test-integration

    - name: Generate coverage report
      run: |
        make test-coverage
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        verbose: true
        slug: ${{ github.repository }}
      continue-on-error: true
      
    - name: Coverage Upload Summary
      if: always()
      run: |
        if [ -f "coverage.xml" ]; then
          echo "📊 Coverage report generated successfully"
          echo "📝 File size: $(du -h coverage.xml | cut -f1)"
          echo ""
          if [ -n "${{ secrets.CODECOV_TOKEN }}" ]; then
            echo "✅ Codecov token is configured"
          else
            echo "⚠️  Codecov token not configured - uploads may be rate limited"
            echo "💡 Add CODECOV_TOKEN secret to enable reliable coverage uploads"
            echo "   Visit: https://app.codecov.io/gh/${{ github.repository }}"
          fi
        else
          echo "❌ No coverage report found"
        fi

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt
        
    - name: Run safety check
      run: |
        safety check --output screen || true
        
    - name: Run bandit security linter
      run: |
        bandit -r app/ -f json -o bandit-report.json --skip B104 || true
        bandit -r app/ --skip B104

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build and test Docker image
      run: |
        echo "🐳 Building Docker image for testing..."
        docker build -t embeddings-generator:test .
        
        echo "🧪 Testing Docker image..."
        docker run --rm embeddings-generator:test python -c "
        import app
        print('✅ App module imports successfully')
        print('✅ Docker image works correctly!')
        "
        
        echo "📊 Docker image details:"
        docker images embeddings-generator:test
        
        echo "✅ Docker build and test completed successfully"
        
        # Optional: Save image info for later use
        echo "DOCKER_IMAGE_ID=$(docker images -q embeddings-generator:test)" >> $GITHUB_ENV

  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    # Uncomment the next line and create a 'production' environment in GitHub repo settings for deployment protection
    # environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deployment step - configure based on your infrastructure"
        echo "Examples:"
        echo "- Deploy to Kubernetes cluster"
        echo "- Update docker-compose on server"
        echo "- Deploy to cloud provider (AWS, GCP, Azure)"
        echo "- Update serverless functions"
        
    - name: Health check
      run: |
        echo "Health check - implement based on your deployment"
        echo "curl -f http://your-api-endpoint/health || exit 1"