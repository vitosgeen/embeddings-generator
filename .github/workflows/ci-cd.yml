name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        # Install flake8
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run unit tests
      run: |
        make test-unit

    - name: Run integration tests
      run: |
        make test-integration

    - name: Generate coverage report
      run: |
        make test-coverage
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        verbose: true
        slug: ${{ github.repository }}
      continue-on-error: true
      
    - name: Coverage Upload Summary
      if: always()
      run: |
        if [ -f "coverage.xml" ]; then
          echo "üìä Coverage report generated successfully"
          echo "üìù File size: $(du -h coverage.xml | cut -f1)"
          echo ""
          if [ -n "${{ secrets.CODECOV_TOKEN }}" ]; then
            echo "‚úÖ Codecov token is configured"
          else
            echo "‚ö†Ô∏è  Codecov token not configured - uploads may be rate limited"
            echo "üí° Add CODECOV_TOKEN secret to enable reliable coverage uploads"
            echo "   Visit: https://app.codecov.io/gh/${{ github.repository }}"
          fi
        else
          echo "‚ùå No coverage report found"
        fi

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt
        
    - name: Run safety check
      run: |
        safety check --output screen || true
        
    - name: Run bandit security linter
      run: |
        bandit -r app/ -f json -o bandit-report.json --skip B104 || true
        bandit -r app/ --skip B104

  # Docker build removed - too large and expensive for ML models
  # The application can be deployed directly with Python virtual environments
  # or containerized later with optimized images if needed
  
  validate-deployment:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Validate production deployment readiness
      run: |
        echo "ÔøΩ Validating deployment readiness..."
        
        # Check essential files exist
        if [ -f "main.py" ] && [ -f "requirements.txt" ] && [ -d "app" ]; then
          echo "‚úÖ Essential application files present"
        else
          echo "‚ùå Missing essential files"
          exit 1
        fi
        
        # Check if app can be imported (syntax validation)
        python -c "
        import sys
        sys.path.insert(0, '.')
        try:
            import app
            print('‚úÖ Application imports successfully')
        except Exception as e:
            print(f'‚ùå Import error: {e}')
            sys.exit(1)
        "
        
        echo "ÔøΩ Application structure:"
        find app -name "*.py" | head -10
        
        echo "üì¶ Requirements validation:"
        pip install --dry-run -r requirements.txt > /dev/null 2>&1 && echo "‚úÖ Requirements are installable" || echo "‚ö†Ô∏è Requirements issues detected"
        
        echo "‚úÖ Application is ready for deployment"

  deploy:
    runs-on: ubuntu-latest
    needs: [validate-deployment]
    if: github.ref == 'refs/heads/main'
    # Uncomment the next line and create a 'production' environment in GitHub repo settings for deployment protection
    # environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "üöÄ Deployment options for Python ML applications:"
        echo ""
        echo "üêç Python-based deployment (Recommended):"
        echo "- Deploy with virtual environment: python -m venv && pip install -r requirements.txt"
        echo "- Use systemd service or supervisor for process management"
        echo "- Deploy to cloud platforms (AWS Lambda, Google Cloud Functions, Azure Functions)"
        echo "- Use serverless ML platforms (AWS SageMaker, Google Vertex AI)"
        echo ""
        echo "üì¶ Alternative containerization (if needed):"
        echo "- Use distroless images for smaller size"
        echo "- Multi-stage builds with CPU-only PyTorch"
        echo "- Consider model serving platforms (TorchServe, TensorFlow Serving)"
        echo ""
        echo "‚òÅÔ∏è Cloud-native options:"
        echo "- Kubernetes with HPA for auto-scaling"
        echo "- Cloud Run, AWS Fargate, or Azure Container Instances"
        echo "- Use managed ML services that handle infrastructure"
        
    - name: Health check
      run: |
        echo "Health check - implement based on your deployment"
        echo "curl -f http://your-api-endpoint/health || exit 1"